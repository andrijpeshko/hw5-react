{"version":3,"file":"static/js/593.3c3e740c.chunk.js","mappings":"+OAOMA,EAAe,mCAAG,WAAMC,GAAN,gGAEGC,EAAAA,EAAAA,IAAA,UAPf,8BAOe,mBACJD,EADI,4BANf,mCAMe,qBALV,QAKU,iBAJd,IAEW,cAEdE,EAFc,yBAKbA,EAASC,MALI,gCAOpBC,QAAQC,IAAR,MAPoB,yDAAH,sDAWrB,I,uCChBaC,EAAgBC,EAAAA,GAAAA,GAAH,uRAIf,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,OAAvB,IACE,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,MAAM,EAAtB,IACJ,SAAAJ,GAAK,OAAIA,EAAMC,MAAMG,MAAM,EAAtB,IAET,SAAAJ,GAAK,OAAIA,EAAMC,MAAMI,UAAU,EAA1B,IAOPC,EAAiBP,EAAAA,GAAAA,GAAH,kWAIT,SAAAC,GAAK,OAAIA,EAAMC,MAAMG,MAAM,EAAtB,IACJ,SAAAJ,GAAK,OAAIA,EAAMC,MAAMG,MAAM,EAAtB,IAET,SAAAJ,GAAK,OAAIA,EAAMC,MAAMI,UAAU,EAA1B,IAQF,SAAAL,GAAK,OAAIA,EAAMC,MAAMM,QAAQC,SAAxB,IAIVC,EAAcV,EAAAA,GAAAA,GAAH,kDACF,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOQ,UAAvB,I,6BC4B3B,EAjDe,WACb,IAAQlB,GAAOmB,EAAAA,EAAAA,MAAPnB,GACR,GAA6BoB,EAAAA,EAAAA,UAAS,IAAtC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KA0BK,OAxBLC,EAAAA,EAAAA,YAAU,WACRD,GAAa,GACLzB,EAAgBC,GACb0B,MAAK,SAAAxB,GAEJ,GADAsB,GAAa,GACmB,IAA5BtB,EAASyB,QAAQC,OACnB,OAAOC,EAAAA,GAAAA,KAAW,mCAAoC,CACpDC,SAAU,YACVC,UAAW,IACXtB,MAAO,YAGXa,EAAUpB,EAASyB,QACpB,IACAK,OAAM,SAAAC,GACL7B,QAAQC,IAAI4B,GACZT,GAAa,EACd,GACJ,GAAE,CAACxB,IAELI,QAAQC,IAAIgB,IAKZ,4BACE,SAAC,KAAD,KACA,yBACGA,EAAQa,KAAI,YAA8B,IAA3BlC,EAA0B,EAA1BA,GAAImC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,0BACE,UAACnB,EAAD,YACE,SAACX,EAAD,UAAgB6B,KAChB,SAACrB,EAAD,UAAiBsB,QAHXpC,EAOb,MAEFuB,IAAa,SAACc,EAAA,EAAD,MAGnB,C,8CClDN,IAVgB,kBACd,SAAC,KAAD,CACEC,YAAY,QACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,MACNC,SAAS,GANG,C","sources":["API/getMovieReviews.js","components/Rewievs/Rewievs.styled.js","components/Rewievs/Rewievs.jsx","components/Spinner/Spinner.js"],"sourcesContent":["import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/';\nconst KEY = 'd912e4e6ac5ac1e34c6318ab6e2c9716';\nconst LANGUAGE = 'en-US';\nconst PAGE = 1;\n\nconst getMovieReviews = async id => {\n  try {\n    const response = await axios.get(\n      `${URL}3/movie/${id}/reviews?api_key=${KEY}&language=${LANGUAGE}&page=${PAGE}`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default getMovieReviews;\n","import styled from \"styled-components\";\n\nexport const RewievsAuthor = styled.li`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  color: ${props => props.theme.colors.primary};\n  margin-right: ${props => props.theme.space[4]}px;\n  margin-bottom: ${props => props.theme.space[4]}px;\n  font-family: 'Sevillana', cursive;\n  font-size: ${props => props.theme.fontSizes[6]}px;\n  object-fit: cover;\n  width: 100%;\n  text-align: center;\n  }\n`;\n\nexport const RewievsContent = styled.li`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  margin-right: ${props => props.theme.space[4]}px;\n  margin-bottom: ${props => props.theme.space[4]}px;\n  font-family: 'Montserrat', sans-serif;\n  font-size: ${props => props.theme.fontSizes[3]}px;\n  line-height: 1.5;\n  object-fit: cover;\n  width: 100%;\n\n  &:hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n    box-shadow: ${props => props.theme.shadows.boxShadow};\n  }\n`;\n\nexport const RewievsCard = styled.ul`\n  background-color: ${props => props.theme.colors.background};\n`;","\nimport getMovieReviews from \"API/getMovieReviews\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport {\n  RewievsAuthor,\n  RewievsContent,\n  RewievsCard,\n} from './Rewievs.styled';\nimport { ToastContainer, toast } from 'react-toastify';\nimport Spinner from \"components/Spinner/Spinner\";\n\n     \n\nconst Review = () => {\n  const { id } = useParams();\n  const [reviews, setReview] = useState([])\n  const [isLoading, setIsLoading] = useState(false);\n         \n  useEffect(() => {\n    setIsLoading(true);\n            getMovieReviews(id)\n              .then(response => {\n                setIsLoading(false);\n                if (response.results.length === 0) {\n                  return toast.info(\"Sorry, we don't have any review.\", {\n                    position: 'top-right',\n                    autoClose: 3000,\n                    theme: 'colored',\n                  });\n                }\n                setReview(response.results);\n              })\n              .catch(error => {\n                console.log(error);\n                setIsLoading(false);\n              })\n          }, [id]);\n\n         console.log(reviews);\n            \n                    \n         \n       return (\n         <div>\n           <ToastContainer />\n           <div>\n             {reviews.map(({ id, author, content }) => {\n               return (\n                 <div key={id}>\n                   <RewievsCard>\n                     <RewievsAuthor>{author}</RewievsAuthor>\n                     <RewievsContent>{content}</RewievsContent>\n                   </RewievsCard>\n                 </div>\n               );\n             })}\n           </div>\n           {isLoading && <Spinner />}\n         </div>\n       );\n     };\n\nexport default Review;\n     \nReview.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ),\n};\n","\nimport { RotatingLines } from 'react-loader-spinner';\n\nconst Spinner = () => (\n  <RotatingLines\n    strokeColor=\"brown\"\n    strokeWidth=\"5\"\n    animationDuration=\"0.75\"\n    width=\"400\"\n    visible={true}\n  />\n);\n\nexport default Spinner;"],"names":["getMovieReviews","id","axios","response","data","console","log","RewievsAuthor","styled","props","theme","colors","primary","space","fontSizes","RewievsContent","shadows","boxShadow","RewievsCard","background","useParams","useState","reviews","setReview","isLoading","setIsLoading","useEffect","then","results","length","toast","position","autoClose","catch","error","map","author","content","Spinner","strokeColor","strokeWidth","animationDuration","width","visible"],"sourceRoot":""}