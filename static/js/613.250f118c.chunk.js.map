{"version":3,"file":"static/js/613.250f118c.chunk.js","mappings":"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","sources":["components/MovieItem/MovieItem.styled.js","components/MovieItem/MovieItem.jsx","components/MoviesSet/MovieSet.styled.js","components/MoviesSet/MovieSet.jsx","components/Spinner/Spinner.js","API/getMovieTranding.js","pages/Home/Home.styled.js","pages/Home/Home.jsx"],"sourcesContent":["import { NavLink } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const MovieItemCard = styled.li`\n  width: 250px;\n  heigth: 450px;\n  margin: 10px;\n  position: relative;\n  list-style: none;\n\n  &:hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n    box-shadow: ${props => props.theme.shadows.boxShadow};\n    border: ${props => props.theme.borders.light};\n  }\n`;\n\nexport const MovieItemTitle = styled.h1`\n  font-family: 'Montserrat', sans-serif;\n  font-size: ${props => props.theme.fontSizes[2]}px;\n  color: ${props => props.theme.colors.primary};\n  margin: 0 auto;\n  height: 70px;\n \n`;\n\nexport const MovieItemScore = styled.p`\nposition: absolute;\nbottom: 5px;\nmargin: 0 auto;\n`\n\nexport const MovieItemLink = styled(NavLink)`\n  text-decoration: none;\n`;","import { useLocation } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport {\n  MovieItemCard,\n  MovieItemTitle,\n  MovieItemScore,\n  MovieItemLink,\n} from './MovieItem.styled';\n\n\nconst MovieItem = ({ id, src, title, vote }) => {\n  const location = useLocation();\n\n  return (\n    <MovieItemCard key={id} title={title}>\n      <MovieItemLink to={`/movies/${id}`} state={{ from: location }}>\n        <img src={src} alt={title} width=\"250\" height=\"350\" />\n        <MovieItemTitle>{title}</MovieItemTitle>\n      </MovieItemLink>\n      <MovieItemScore>User score: &#11088; {Math.round(vote)}</MovieItemScore>\n    </MovieItemCard>\n  );\n};\n\nexport default MovieItem;\n\nMovieItem.propTypes = {\n\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  vote: PropTypes.number.isRequired,\n}\n\n\n","import styled from \"styled-components\";\n\nexport const MovieList = styled.ul`\ndisplay: flex;\nflex-wrap: wrap;`","import MovieItem from \"components/MovieItem/MovieItem\";\nimport PropTypes from 'prop-types';\nimport defaultPic from 'Image/default_picture.jpg';\nimport { MovieList } from \"./MovieSet.styled\";\n\n\nconst MovieSet = ({ movies }) => {\n  const pathname = 'https://image.tmdb.org/t/p/w500';\n  \n  return (\n    <MovieList>\n      {movies.map(({ id, poster_path, title, vote_average }) => {\n        const checkPic = poster_path ? `${pathname}${poster_path}` : defaultPic;\n        return (\n          <MovieItem\n            key={id}\n            id={id}\n            src={checkPic}\n            title={title}\n            vote={vote_average}\n          >\n            {title}\n          </MovieItem>\n        );\n      })}\n    </MovieList>\n  );\n};\n\n  MovieSet.propTypes = {\n    movies: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        title: PropTypes.string.isRequired,\n        vote_average: PropTypes.number.isRequired,\n      })\n    ),\n  };\n\n\nexport default MovieSet;\n\n","\nimport { RotatingLines } from 'react-loader-spinner';\n\nconst Spinner = () => (\n  <RotatingLines\n    strokeColor=\"brown\"\n    strokeWidth=\"5\"\n    animationDuration=\"0.75\"\n    width=\"400\"\n    visible={true}\n  />\n);\n\nexport default Spinner;","import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/';\nconst KEY = 'd912e4e6ac5ac1e34c6318ab6e2c9716';\nconst LANGUAGE = 'en-US';\nconst PAGE = 1;\n\nconst getMovieTranding = async () => {\n  try {\n    const response = await axios.get(\n      `${URL}3/trending/movie/day?api_key=${KEY}&language=${LANGUAGE}&page=${PAGE}`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default getMovieTranding;\n","import styled from \"styled-components\";\n\nexport const HomePage = styled.div`\n  background-color: ${props => props.theme.colors.background};\n`;\n\nexport const HomepageTitle = styled.div`\n  font-size: ${props => props.theme.fontSizes[7]}px;\n  font-family: 'Sevillana', cursive;\n  text-align: center;\n  color: ${props => props.theme.colors.primary};\n  padding-top: 90px;\n`;","\nimport { useState, useEffect } from \"react\";\nimport getMovieTranding from \"API/getMovieTranding\";\nimport MovieSet from 'components/MoviesSet/MovieSet';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport PropTypes from 'prop-types';\nimport { HomePage, HomepageTitle } from './Home.styled';\nimport Spinner from \"components/Spinner/Spinner\";\n\n \n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n   const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getMovieTranding()\n      .then(response => {\n        if (response.results.length === 0) {\n          return toast.warn(\"We couldn't find result on your request.\", {\n            position: 'top-right',\n            autoClose: 3000,\n            theme: 'colored',\n          });\n        }\n        setMovies(response.results);\n        setIsLoading(false);\n      })\n      .catch(error => {\n        console.log(error);\n        setIsLoading(false);\n      })\n  }, []);\n\n  console.log(movies)\n\n  return (\n    <main>\n      <HomePage>\n        <ToastContainer />\n        <HomepageTitle>Trending today</HomepageTitle>\n        <MovieSet movies={movies} />\n      </HomePage>\n      {isLoading && <Spinner />}\n    </main>\n  );\n}\n\nexport default Home;\n\n  Home.propTypes = {\n    movies: PropTypes.arrayOf(\n      PropTypes.shape({})\n    ),\n  };\n"],"names":["MovieItemCard","styled","props","theme","shadows","boxShadow","borders","light","MovieItemTitle","fontSizes","colors","primary","MovieItemScore","MovieItemLink","NavLink","id","src","title","vote","location","useLocation","to","state","from","alt","width","height","Math","round","MovieList","movies","map","poster_path","vote_average","checkPic","defaultPic","strokeColor","strokeWidth","animationDuration","visible","getMovieTranding","axios","response","data","console","log","HomePage","background","HomepageTitle","useState","setMovies","isLoading","setIsLoading","useEffect","then","results","length","toast","position","autoClose","catch","error","MovieSet","Spinner"],"sourceRoot":""}